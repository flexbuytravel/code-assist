rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection for role-based access
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId || hasRole("admin");
    }

    // Companies
    match /companies/{companyId} {
      allow read: if isAdmin() || isCompany(companyId);
      allow write: if isAdmin() || isCompany(companyId);
    }

    // Agents
    match /agents/{agentId} {
      allow read: if isAdmin() || isAgent(agentId) || isCompany(resource.data.companyId);
      allow write: if isAdmin() || isCompany(resource.data.companyId) || isAgent(agentId);
    }

    // Packages
    match /packages/{packageId} {
      allow read: if isAdmin() || isCompany(resource.data.companyId) || isAgent(resource.data.agentId) || isCustomerLinkedToPackage(packageId);
      allow create: if isAdmin() || isCompany(request.resource.data.companyId) || isAgent(request.resource.data.agentId);
      allow update: if isAdmin() || isCompany(resource.data.companyId) || isAgent(resource.data.agentId);
      allow delete: if isAdmin() || isCompany(resource.data.companyId);
    }

    // Customers
    match /customers/{customerId} {
      allow read: if request.auth.uid == customerId || isAdmin() || isCompany(resource.data.companyId) || isAgent(resource.data.agentId);
      allow create: if request.auth.uid == customerId || isAdmin();
      allow update: if request.auth.uid == customerId && !('depositPaid' in request.resource.data.diff(resource.data).affectedKeys()) && !('expiryDate' in request.resource.data.diff(resource.data).affectedKeys()) || isAdmin() || isCompany(resource.data.companyId);
    }

    function isAdmin() {
      return hasRole("admin");
    }

    function isCompany(companyId) {
      return hasRole("company") && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

    function isAgent(agentId) {
      return hasRole("agent") && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agentId == agentId;
    }

    function isCustomerLinkedToPackage(packageId) {
      return exists(/databases/$(database)/documents/customers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/customers/$(request.auth.uid)).data.packageId == packageId;
    }

    function hasRole(role) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
  }
}