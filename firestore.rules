rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth.token.role == 'admin';
    }

    function isCompany() {
      return request.auth.token.role == 'company';
    }

    function isAgent() {
      return request.auth.token.role == 'agent';
    }

    function isCustomer() {
      return request.auth.token.role == 'customer';
    }

    match /companies/{companyId} {
      allow create: if isAdmin();
      allow read, update, delete: if isAdmin() || (isCompany() && request.auth.uid == companyId);
    }

    match /agents/{agentId} {
      allow create: if isCompany() && request.resource.data.companyId == request.auth.uid;
      allow read, update, delete: if isAdmin() || (isCompany() && resource.data.companyId == request.auth.uid) || (isAgent() && request.auth.uid == agentId);
    }

    match /packages/{packageId} {
      // Create: only agents can create, must include their own agentId and a valid companyId
      allow create: if isAgent()
        && request.resource.data.agentId == request.auth.uid
        && request.resource.data.companyId is string
        && request.resource.data.companyId != "";

      // Read: anyone signed in can read packages
      allow read: if request.auth != null;

      // Update:
      //  - Only the agent who owns it, the company that owns it, or admin can update
      //  - Claimed packages cannot have `claimedBy` changed unless admin
      allow update: if (
        (isAgent() && resource.data.agentId == request.auth.uid) ||
        (isCompany() && resource.data.companyId == request.auth.uid) ||
        isAdmin()
      )
      && !(("claimedBy" in resource.data) && (resource.data.claimedBy != request.resource.data.claimedBy) && !isAdmin());

      // Claim prevention:
      // Customers can only claim if it's unclaimed
      allow update: if isCustomer()
        && !( "claimedBy" in resource.data ) // <-- prevents claiming already claimed package
        && request.resource.data.claimedBy == request.auth.uid;
    }
  }
}